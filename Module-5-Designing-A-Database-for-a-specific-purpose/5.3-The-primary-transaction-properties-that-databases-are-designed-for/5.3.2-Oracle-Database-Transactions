### **翻译**

#### **事务概述**
- **事务**是一个逻辑的、原子的工作单元，包含一个或多个SQL语句。  
- 事务将SQL语句分组，这些语句要么**全部提交**（应用于数据库），要么**全部回滚**（从数据库中撤销）。Oracle数据库为每个事务分配一个唯一标识符，称为**事务ID**。  

#### **ACID属性**
所有Oracle事务都遵循数据库事务的基本属性，称为**ACID**属性：  
1. **原子性（Atomicity）**  
   - 事务中的所有任务要么全部执行，要么不执行。例如，如果一个事务更新了100行，但系统在完成20行后失败，则数据库会回滚这20行的更改。  

2. **一致性（Consistency）**  
   - 事务会将数据库从一个一致状态转变为另一个一致状态。例如，在银行交易中，借记储蓄账户并贷记支票账户的操作不能因为故障而只完成一部分，否则会导致数据不一致。  

3. **隔离性（Isolation）**  
   - 事务的效果在提交之前对其他事务不可见。例如，一个用户更新`hr.employees`表时，不会看到其他用户正在进行但尚未提交的更改。因此，对用户而言，事务似乎是串行执行的。  

4. **持久性（Durability）**  
   - 提交的事务所做的更改是永久性的。事务完成后，数据库通过恢复机制确保这些更改不会丢失。  

---

#### **事务示例：账户借记与贷记**  
以银行数据库为例，客户从储蓄账户向支票账户转账的事务包括以下操作：  
1. 从储蓄账户中扣减金额。  
2. 向支票账户中增加金额。  
3. 在事务日志中记录该交易。  

数据库需处理两种情况：  
- 如果三个SQL语句全部成功，则事务的效果可以应用到数据库。  
- 如果由于**资金不足**、**账户号无效**或**硬件故障**等问题导致事务中某些语句未能完成，则数据库必须回滚整个事务，确保账户余额正确。  

---

#### **事务结构**
一个数据库事务由一个或多个语句组成，通常包括以下内容之一：  
1. 一个或多个数据操作语言（DML）语句，这些语句共同对数据库进行原子性更改。  
2. 一个数据定义语言（DDL）语句。  
事务有明确的**起点**和**终点**。  

---

### **总结（英文）**
1. **Transaction Definition**: A transaction is a logical, atomic unit of work that consists of one or more SQL statements. It ensures either all statements succeed (commit) or all fail (rollback).  

2. **ACID Properties**:  
   - **Atomicity**: Transactions succeed or fail as a whole.  
   - **Consistency**: Transactions maintain database integrity by transitioning between consistent states.  
   - **Isolation**: Uncommitted transactions are invisible to others.  
   - **Durability**: Committed changes are permanent and recoverable.  

3. **Transaction Example**: A banking transaction (debit, credit, record) demonstrates the atomicity and rollback mechanism if any step fails.  

4. **Transaction Structure**: A transaction comprises DML statements or a DDL statement, with a defined beginning and end.

---

### **总结（中文）**
1. **事务定义**：事务是一个逻辑的、原子的工作单元，包含一个或多个SQL语句。事务保证语句要么全部提交（成功），要么全部回滚（失败）。  

2. **ACID属性**：  
   - **原子性**：事务作为整体成功或失败。  
   - **一致性**：事务在一致状态之间转换，保持数据库完整性。  
   - **隔离性**：未提交的事务对其他事务不可见。  
   - **持久性**：提交的更改永久有效并可恢复。  

3. **事务示例**：银行事务（借记、贷记、记录）展示了原子性和回滚机制。  

4. **事务结构**：事务由DML语句或DDL语句组成，具有明确的开始和结束。


### **串行执行的定义**

**串行执行**（Serial Execution）是指在计算或操作过程中，任务按照严格的顺序逐个执行的方式。每个任务在前一个任务完成之后才能开始，任务之间没有重叠或并发执行的情况。

---

### **特点**
1. **严格的顺序性**：任务按照既定的顺序逐一执行。
2. **无并发**：同一时间只有一个任务在执行，资源独占。
3. **简单性**：逻辑简单，无需处理并发问题（如死锁、资源竞争）。

---

### **应用场景**
1. **事务执行**：
   - 数据库中的事务以串行方式执行，避免并发引起的不一致性。例如，某些高要求的金融系统。
2. **任务调度**：
   - 某些系统中，任务需要串行化执行，以保证结果的确定性。
3. **单线程程序**：
   - 单线程环境中，所有任务都以串行方式执行。

---

### **串行执行的优缺点**

#### **优点**
1. **避免冲突**：串行执行消除了并发访问资源可能引发的冲突。
2. **一致性**：由于严格的执行顺序，结果是可预测的。
3. **实现简单**：无需复杂的同步机制。

#### **缺点**
1. **性能低**：无法利用多核或并行计算能力。
2. **效率低**：在资源密集型任务中可能导致资源的低利用率。

---

### **示例**
#### 1. 串行数据库事务
```sql
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE id = 1;
UPDATE accounts SET balance = balance + 100 WHERE id = 2;
COMMIT;
```
在这个例子中，所有的更新操作是严格按顺序执行的。只有当第一步完成后，第二步才能开始。

#### 2. 串行任务执行
```python
# 串行任务示例
def task1():
    print("Task 1 complete.")

def task2():
    print("Task 2 complete.")

task1()
task2()
```
输出结果：
```
Task 1 complete.
Task 2 complete.
```
每个任务按照编写顺序依次执行。

---

### **与并发执行的对比**
| 特性            | 串行执行               | 并发执行               |
|-----------------|----------------------|----------------------|
| **执行方式**     | 一个任务接一个任务执行 | 多个任务同时进行        |
| **资源利用率**   | 资源利用率较低         | 资源利用率较高         |
| **复杂性**       | 逻辑简单               | 需要同步与协调机制      |
| **适用场景**     | 强一致性、低并发要求     | 高性能、高并发场景       |

串行执行适用于逻辑简单且强一致性要求的场景，例如关键数据的处理，而并发执行更适合高性能计算和高并发访问的场景。