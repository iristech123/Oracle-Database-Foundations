#### **总结**：
1. **拆分表格结构**：
   - 将单一的客户信息表单拆分成逻辑上的多个部分：
     - 客户信息（Customer Information）
     - 地址信息（Address Information）
     - 业务信息（Business Information）
     - 所有者信息（Owner Information）

2. **创建实体（Entities）**：
   - 每个逻辑部分成为一个独立的实体（Entity），分别存储对应的数据。
   - 客户表（Customer Table）作为核心表，包含：
     - `CUST ID`（主键，用于唯一标识客户）
     - 客户名（Name）、法律名称（Legal Name）、邮箱（Email）

3. **建立主键与外键的关系**：
   - 客户表中的主键 `CUST ID` 用作其他表的外键，关联这些表：
     - 地址表（Address Table）：包含 `Address ID`（主键）和 `CUST ID`（外键）
     - 所有者表（Owner Table）：包含 `Owner ID`（主键）和 `CUST ID`（外键）
     - 业务表（Business Table）：包含 `Business ID`（主键）和 `CUST ID`（外键）

4. **外键的作用**：
   - 外键 (`CUST ID`) 用于在多个表之间建立关系，使得：
     - 客户可以关联多个地址、业务信息和所有者信息。
   - 各表的主键如 `Address ID`、`Owner ID` 和 `Business ID` 仅用于标识每条记录，不重复。

5. **构建实体关系图（ERD）**：
   - 客户表（核心实体）通过 `CUST ID` 与其他实体建立关系。
   - ERD 显示了实体及其之间的主键和外键连接。

---

#### **总结**：

1. **拆分表单**：
   将一个客户信息表单拆解为多个逻辑组件：
   - 客户信息：存储基本的客户数据。
   - 地址信息：处理一个客户可能有多个地址的情况（如发货地址、分支机构地址）。
   - 业务信息：存储与客户相关的业务类型数据。
   - 所有者信息：记录与客户相关的所有者数据。

2. **创建实体表**：
   每个逻辑组件被拆分为一个表。例如，客户信息表包括：
   - 一个主键 `CUST ID`，用于唯一标识每位客户。
   - 其他字段如客户名称、法律名称和邮箱。

3. **主键与外键设计**：
   - 客户表的主键 `CUST ID` 用作其他表（地址、业务、所有者）的外键。
   - 地址表的 `Address ID`、业务表的 `Business ID` 和所有者表的 `Owner ID` 是各自的主键，用于标识记录。

4. **实体关系图（ERD）**：
   - 图中显示了客户表与其他表之间的关系，所有外键 `CUST ID` 都指向客户表的主键。
   - 通过 ERD，清晰展示了数据如何被关联和存储。

---

#### **核心意义**：
这种拆分和关系设计方式能够减少数据冗余、提高查询效率，并使数据结构清晰、易于扩展。这种规范化的数据库设计是创建高效数据库的基础。